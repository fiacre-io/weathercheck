/*! teleport-autocomplete - v0.3.3 | https://github.com/teleport/autocomplete#readme | MIT */
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/autocomplete.js","node_modules/classlist-polyfill/src/index.js","node_modules/core-js/library/fn/array/find.js","node_modules/core-js/library/fn/object/assign.js","node_modules/core-js/library/fn/regexp/escape.js","node_modules/core-js/library/modules/$.a-function.js","node_modules/core-js/library/modules/$.add-to-unscopables.js","node_modules/core-js/library/modules/$.array-methods.js","node_modules/core-js/library/modules/$.array-species-create.js","node_modules/core-js/library/modules/$.cof.js","node_modules/core-js/library/modules/$.core.js","node_modules/core-js/library/modules/$.ctx.js","node_modules/core-js/library/modules/$.defined.js","node_modules/core-js/library/modules/$.export.js","node_modules/core-js/library/modules/$.fails.js","node_modules/core-js/library/modules/$.global.js","node_modules/core-js/library/modules/$.iobject.js","node_modules/core-js/library/modules/$.is-array.js","node_modules/core-js/library/modules/$.is-object.js","node_modules/core-js/library/modules/$.js","node_modules/core-js/library/modules/$.object-assign.js","node_modules/core-js/library/modules/$.replacer.js","node_modules/core-js/library/modules/$.shared.js","node_modules/core-js/library/modules/$.to-integer.js","node_modules/core-js/library/modules/$.to-length.js","node_modules/core-js/library/modules/$.to-object.js","node_modules/core-js/library/modules/$.uid.js","node_modules/core-js/library/modules/$.wks.js","node_modules/core-js/library/modules/es6.array.find.js","node_modules/core-js/library/modules/es6.object.assign.js","node_modules/core-js/library/modules/es7.regexp.escape.js","node_modules/date-now/index.js","node_modules/debounce/index.js","node_modules/element-closest/closest.js","node_modules/halfred/halfred.js","node_modules/halfred/lib/immutable_stack.js","node_modules/halfred/lib/parser.js","node_modules/halfred/lib/resource.js","node_modules/minivents/dist/minivents.commonjs.min.js"],"names":[],"mappings":"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BAAiB;;AAClE,sDAAO,MAAM,EAAE,EAAE,MAAM,EAAN,MAAM,EAAE,IAAI,EAAJ,IAAI,EAAE,SAAS,EAAT,SAAS,EAAE,MAAM,EAAN,MAAM,EAAE,CAAC,CAAC;OACrD;;AAED,aAAO,MAAM,CAAC;KACf;;;WAvSU,cAAC,EAAE,EAAgB;UAAd,OAAO,yDAAG,EAAE;;AAC1B,UAAM,GAAG,GAAG,AAAC,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,YAAY,gBAAgB,GAAI,8CAAO,OAAO,EAAE,EAAE,EAAE,EAAF,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;AACtG,aAAO,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC;KACtC;;;SAnEG,oBAAoB;;;qBA0WX,oBAAoB;;;;ACzYnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjPA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;;ACHA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhfile":"teleport-autocomplete.js","sourceRoot":"..","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import 'classlist-polyfill';\r\nimport 'element-closest';\r\n\r\nimport halfred from 'halfred';\r\nimport events from 'minivents';\r\n\r\nimport assign from 'core-js/library/fn/object/assign';\r\nimport find from 'core-js/library/fn/array/find';\r\nimport escapeRegexp from 'core-js/library/fn/regexp/escape';\r\nimport debounce from 'debounce';\r\n\r\nconst Key = { BACK: 8, TAB: 9, ENTER: 13, UP: 38, DOWN: 40 };\r\nconst CONTAINER_TEMPLATE = '<div class=\"tp-autocomplete\"><ul class=\"tp-ac__list\"></ul></div>';\r\nconst INPUT_CLASS = 'tp-ac__input';\r\nconst itemWrapperTemplate = item => `<li class=\"tp-ac__item\">${item}</li>`;\r\nconst NO_RESULTS_TEMPLATE = '<li class=\"tp-ac__item no-results\">No matches</li>';\r\nconst GEOLOCATE_TEMPLATE = '<li class=\"tp-ac__item geolocate\">Detect my current location</li>';\r\n\r\n// Default item template, wraps title matches\r\nconst ITEM_TEMPLATE = function renderItem(item) {\r\n  return this.wrapMatches(item.title);\r\n};\r\n\r\n// Shorthands\r\nHTMLElement.prototype.on = HTMLElement.prototype.addEventListener;\r\nHTMLElement.prototype.off = HTMLElement.prototype.removeEventListener;\r\n\r\n\r\n/**\r\n * Teleport Cities Autocomplete\r\n */\r\nclass TeleportAutocomplete {\r\n  get query() { return this._query; }\r\n  set query(query) {\r\n    if (query === this._query) return query;\r\n\r\n    this._query = query;\r\n    this.el.value = query;\r\n    this.emit('querychange', query);\r\n  }\r\n\r\n  get activeIndex() { return this._activeIndex; }\r\n  set activeIndex(index) {\r\n    // Remove old highlight\r\n    const oldNode = this.list.childNodes[this._activeIndex];\r\n    if (oldNode) oldNode.classList.remove('is-active');\r\n\r\n    this._activeIndex = index;\r\n\r\n    // Set highlight\r\n    const activeNode = this.list.childNodes[index];\r\n    if (activeNode) activeNode.classList.add('is-active');\r\n  }\r\n\r\n  // Show or hide loading\r\n  set loading(toggle) {\r\n    this.container.classList.toggle('spinner', toggle);\r\n  }\r\n\r\n\r\n  /**\r\n   * Parse arguments and wrap input\r\n   */\r\n  constructor({\r\n    el = null, value, maxItems = 10, itemTemplate = ITEM_TEMPLATE,\r\n    geoLocate = true, apiRoot = 'https://api.teleport.org/api', apiVersion = 1,\r\n    embeds = 'city:country,city:admin1_division,city:timezone/tz:offsets-now,city:urban_area',\r\n  } = {}) {\r\n    events(this);\r\n\r\n    const elem = (typeof el === 'string') ? document.querySelector(el) : el;\r\n    this.setupInput(elem);\r\n\r\n    assign(this, {\r\n      maxItems, geoLocate, apiRoot, apiVersion, itemTemplate, embeds, results: [],\r\n      _activeIndex: 0, _cache: {}, _query: this.el.value, value,\r\n    });\r\n\r\n    // Prefetch results\r\n    if (this.value && this.value.title) {\r\n      this.query = this.value.title;\r\n    } else if (this.query) {\r\n      this.fetchResults(() => {\r\n        this.value = this.getResultByTitle(this.query);\r\n        this.emit('change', this.value);\r\n      });\r\n    }\r\n\r\n    this.getCities = debounce(this.getCities, 200);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Init shorthand\r\n   */\r\n  static init(el, options = {}) {\r\n    const opt = (typeof el === 'string' || el instanceof HTMLInputElement) ? assign(options, { el }) : el;\r\n    return new TeleportAutocomplete(opt);\r\n  }\r\n\r\n\r\n  /**\r\n   * Clean up the container\r\n   */\r\n  destroy() {\r\n    this.el.off('input', this.oninput);\r\n    this.el.off('keydown', this.onkeydown);\r\n    this.el.off('focus', this.onfocus);\r\n    this.el.off('blur', this.onblur);\r\n    this.el.off('click', this.onclick);\r\n\r\n    this.el.classList.remove(INPUT_CLASS);\r\n\r\n    const containerParent = this.container.parentNode;\r\n    containerParent.replaceChild(this.el.parentNode.removeChild(this.el), this.container);\r\n  }\r\n\r\n\r\n  /**\r\n   * Clear the selected value\r\n   */\r\n  clear() {\r\n    this.results = [];\r\n    this.selectByIndex(0);\r\n  }\r\n\r\n\r\n  /**\r\n   * Wrap input node in container\r\n   */\r\n  setupInput(el) {\r\n    if (!el || !(el instanceof HTMLInputElement)) throw new Error('Invalid element given');\r\n\r\n    el.insertAdjacentHTML('beforebegin', CONTAINER_TEMPLATE);\r\n    Object.defineProperty(this, 'container', { value: el.previousSibling });\r\n    Object.defineProperty(this, 'list', { value: this.container.firstChild });\r\n\r\n    const input = this.container.insertBefore(el.parentNode.removeChild(el), this.list);\r\n    input.classList.add(INPUT_CLASS);\r\n\r\n    Object.defineProperty(this, 'el', { enumerable: true, value: input });\r\n\r\n    this.el.on('input', this.oninput.bind(this));\r\n    this.el.on('keydown', this.onkeydown.bind(this));\r\n    this.el.on('focus', this.onfocus.bind(this));\r\n    this.el.on('blur', this.onblur.bind(this));\r\n    this.el.on('click', this.onclick.bind(this));\r\n\r\n    this.list.on('mousedown', this.onlistclick.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Event handlers\r\n   */\r\n\r\n  // Clicked on list item, select item\r\n  onlistclick(event) {\r\n    const index = [].indexOf.call(this.list.children, event.target.closest('.tp-ac__item'));\r\n    this.selectByIndex(index);\r\n  }\r\n\r\n  // Select text on click\r\n  onclick() { this.el.select(); }\r\n\r\n  // Input has focus, open list\r\n  onfocus() { this.renderList(); }\r\n\r\n  // Input lost focus, close list\r\n  onblur() { this.list.innerHTML = ''; }\r\n\r\n  // Input was typed into\r\n  oninput() {\r\n    this._query = this.el.value;\r\n    this.fetchResults(() => this.renderList());\r\n  }\r\n\r\n  // Called on keypresses\r\n  onkeydown(event) {\r\n    const code = event.keyCode;\r\n\r\n    // Prevent cursor move\r\n    if ([Key.UP, Key.DOWN].indexOf(code) !== -1) event.preventDefault();\r\n\r\n    switch (code) {\r\n    case Key.BACK:\r\n      // Clear filled value or last char\r\n      if (this.value || this.query.length === 1) this.clear();\r\n      break;\r\n    case Key.ENTER:\r\n      // Prevent submit if query is to be selected\r\n      if (!this.value && this.query) event.preventDefault();\r\n      this.selectByIndex(this.activeIndex);\r\n      break;\r\n    case Key.TAB: if (!this.value) this.selectByIndex(this.activeIndex);\r\n      break;\r\n    case Key.UP: this.activeIndex = Math.max(0, this.activeIndex - 1);\r\n      break;\r\n    case Key.DOWN: this.activeIndex = Math.min(this.results.length - 1, this.activeIndex + 1);\r\n      break;\r\n    }\r\n  }\r\n  // ---------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Select option from list by index\r\n   */\r\n  selectByIndex(index) {\r\n    this.activeIndex = index;\r\n    const oldValue = this.value;\r\n    this.value = this.results[index] || null;\r\n\r\n    const isGeolocate = this.list.firstChild && this.list.firstChild.classList.contains('geolocate');\r\n    if (isGeolocate) this.currentLocation();\r\n\r\n    if (oldValue !== this.value && !isGeolocate) this.emit('change', this.value);\r\n\r\n    this.list.innerHTML = '';\r\n    this.query = this.value ? this.value.title : '';\r\n  }\r\n\r\n\r\n  /**\r\n   * Wrap matching result names in <span>s\r\n   */\r\n  wrapMatches(str = '') {\r\n    let res = str;\r\n\r\n    this.query\r\n      .split(/[\\,\\s]+/)\r\n      .filter(qr => !!qr)\r\n      .forEach(query => {\r\n        const matcher = new RegExp(escapeRegexp(query) + '(?![^<]*>|[^<>]*<\\/)', 'gi');\r\n        res = res.replace(matcher, '<span>$&</span>');\r\n      });\r\n\r\n    return res;\r\n  }\r\n\r\n\r\n  /**\r\n   * Render result list\r\n   */\r\n  renderList({ geoLocate = this.geoLocate } = {}) {\r\n    let results = this.results.map(res =>\r\n      itemWrapperTemplate(this.itemTemplate(res)))\r\n      .slice(0, this.maxItems).join('');\r\n\r\n    if (!results && this.query !== '' && !this.value) results = NO_RESULTS_TEMPLATE;\r\n    if (this.query === '' && geoLocate) results = GEOLOCATE_TEMPLATE;\r\n    this.list.innerHTML = results;\r\n\r\n    this.activeIndex = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch value from results by title\r\n   */\r\n  getResultByTitle(title) {\r\n    if (!this.results || !title) return null;\r\n    return find(this.results, res => res.title.indexOf(title) !== -1);\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch picker data from cache or API\r\n   */\r\n  fetchResults(cb = function noop() {}) {\r\n    // Cancel old request\r\n    if (this.req) this.req.abort();\r\n\r\n    const cached = this._cache[this.query];\r\n    if (cached) {\r\n      this.results = cached;\r\n      return cb();\r\n    }\r\n\r\n    this.req = this.getCities(results => {\r\n      this.results = this._cache[this.query] = results;\r\n      cb();\r\n      this.loading = false;\r\n    });\r\n\r\n    this.loading = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Geolocate current city\r\n   */\r\n  currentLocation() {\r\n    const req = new XMLHttpRequest();\r\n    const embed = `location:nearest-cities/location:nearest-city/${this.embeds ? `{${this.embeds}}` : ''}`;\r\n\r\n    this.loading = true;\r\n    this.oldPlaceholder = this.el.placeholder;\r\n    this.el.placeholder = 'Detecting location...';\r\n\r\n    navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n      req.open('GET', `${this.apiRoot}/locations/${coords.latitude},${coords.longitude}/?embed=${embed}`);\r\n      req.setRequestHeader('Accept', `application/vnd.teleport.v${this.apiVersion}+json`);\r\n      req.addEventListener('load', () => this.parseLocation(JSON.parse(req.response)));\r\n      req.send();\r\n    }, ({ message }) => {\r\n      this.loading = false;\r\n      this.el.placeholder = message;\r\n      setTimeout(() => this.el.placeholder = this.oldPlaceholder, 3000);\r\n    }, { timeout: 5000 });\r\n  }\r\n\r\n\r\n  /**\r\n   * Parse current location API response\r\n   */\r\n  parseLocation(json) {\r\n    const res = halfred.parse(json);\r\n    const nearest = res.embeddedArray('location:nearest-cities')[0];\r\n    if (nearest) {\r\n      this.results = [this.parseCity(nearest)];\r\n      if (this.geoLocate === 'nopick') {\r\n        this.el.focus();\r\n        this.renderList({ geoLocate: false });\r\n      } else {\r\n        this.selectByIndex(0);\r\n      }\r\n    }\r\n    this.loading = false;\r\n    this.el.placeholder = this.oldPlaceholder;\r\n  }\r\n\r\n\r\n  /**\r\n   * Make the API call\r\n   */\r\n  getCities(cb) {\r\n    if (!this.query) return cb([]);\r\n    const embed = `city:search-results/city:item/${this.embeds ? `{${this.embeds}}` : ''}`;\r\n\r\n    const req = new XMLHttpRequest();\r\n    const query = encodeURIComponent(this.query);\r\n    req.open('GET', `${this.apiRoot}/cities/?search=${query}&embed=${embed}&limit=${this.maxItems}`);\r\n    req.setRequestHeader('Accept', `application/vnd.teleport.v${this.apiVersion}+json`);\r\n    req.addEventListener('load', () => {\r\n      const results = halfred.parse(JSON.parse(req.response))\r\n        .embeddedArray('city:search-results')\r\n        .map(res => this.parseCity(res));\r\n\r\n      cb(results);\r\n    });\r\n    req.send();\r\n\r\n    return req;\r\n  }\r\n\r\n\r\n  /**\r\n   * Parse city\r\n   */\r\n  parseCity(res) {\r\n    const city = res.embedded('location:nearest-city') || res.embedded('city:item');\r\n    city.country = city.embedded('city:country');\r\n    city.admin1_division = city.embedded('city:admin1_division');\r\n    city.timezone = city.embedded('city:timezone');\r\n    city.urban_area = city.embedded('city:urban_area');\r\n\r\n    const { full_name: fullName, name, geoname_id: geonameId, population,\r\n      location: { latlon: { latitude, longitude } } } = city;\r\n\r\n    const { matching_full_name: title = fullName } = res;\r\n\r\n    const result = { title, name, geonameId, latitude, longitude, population };\r\n\r\n    if (city.country) assign(result, { country: city.country.name });\r\n    if (city.admin1_division) {\r\n      const { name: admin1Division, geonames_admin1_code: admin1DivisionCode } = city.admin1_division;\r\n      assign(result, { admin1Division, admin1DivisionCode });\r\n    }\r\n\r\n    if (city.timezone) {\r\n      const tzNow = city.timezone.embedded('tz:offsets-now');\r\n      assign(result, { tzOffsetMinutes: tzNow.total_offset_min });\r\n    }\r\n\r\n    if (city.urban_area) {\r\n      const { slug: uaSlug, name: uaName, ua_id: uaId, teleport_city_url: uaCityUrl } = city.urban_area;\r\n      assign(result, { uaName, uaId, uaCityUrl, uaSlug });\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default TeleportAutocomplete;\r\n","/*\n * classList.js: Cross-browser full element.classList implementation.\n * 2014-07-23\n *\n * By Eli Grey, http://eligrey.com\n * Public Domain.\n * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/\n\n/* Copied from MDN:\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\n */\n\nif (\"document\" in window.self) {\n\n  // Full polyfill for browsers with no classList support\n  // Including IE < Edge missing SVGElement.classList\n  if (!(\"classList\" in document.createElement(\"_\"))\n    || document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))) {\n\n  (function (view) {\n\n    \"use strict\";\n\n    if (!('Element' in view)) return;\n\n    var\n        classListProp = \"classList\"\n      , protoProp = \"prototype\"\n      , elemCtrProto = view.Element[protoProp]\n      , objCtr = Object\n      , strTrim = String[protoProp].trim || function () {\n        return this.replace(/^\\s+|\\s+$/g, \"\");\n      }\n      , arrIndexOf = Array[protoProp].indexOf || function (item) {\n        var\n            i = 0\n          , len = this.length\n        ;\n        for (; i < len; i++) {\n          if (i in this && this[i] === item) {\n            return i;\n          }\n        }\n        return -1;\n      }\n      // Vendors: please allow content code to instantiate DOMExceptions\n      , DOMEx = function (type, message) {\n        this.name = type;\n        this.code = DOMException[type];\n        this.message = message;\n      }\n      , checkTokenAndGetIndex = function (classList, token) {\n        if (token === \"\") {\n          throw new DOMEx(\n              \"SYNTAX_ERR\"\n            , \"An invalid or illegal string was specified\"\n          );\n        }\n        if (/\\s/.test(token)) {\n          throw new DOMEx(\n              \"INVALID_CHARACTER_ERR\"\n            , \"String contains an invalid character\"\n          );\n        }\n        return arrIndexOf.call(classList, token);\n      }\n      , ClassList = function (elem) {\n        var\n            trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\n          , classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\n          , i = 0\n          , len = classes.length\n        ;\n        for (; i < len; i++) {\n          this.push(classes[i]);\n        }\n        this._updateClassName = function () {\n          elem.setAttribute(\"class\", this.toString());\n        };\n      }\n      , classListProto = ClassList[protoProp] = []\n      , classListGetter = function () {\n        return new ClassList(this);\n      }\n    ;\n    // Most DOMException implementations don't allow calling DOMException's toString()\n    // on non-DOMExceptions. Error's toString() is sufficient here.\n    DOMEx[protoProp] = Error[protoProp];\n    classListProto.item = function (i) {\n      return this[i] || null;\n    };\n    classListProto.contains = function (token) {\n      token += \"\";\n      return checkTokenAndGetIndex(this, token) !== -1;\n    };\n    classListProto.add = function () {\n      var\n          tokens = arguments\n        , i = 0\n        , l = tokens.length\n        , token\n        , updated = false\n      ;\n      do {\n        token = tokens[i] + \"\";\n        if (checkTokenAndGetIndex(this, token) === -1) {\n          this.push(token);\n          updated = true;\n        }\n      }\n      while (++i < l);\n\n      if (updated) {\n        this._updateClassName();\n      }\n    };\n    classListProto.remove = function () {\n      var\n          tokens = arguments\n        , i = 0\n        , l = tokens.length\n        , token\n        , updated = false\n        , index\n      ;\n      do {\n        token = tokens[i] + \"\";\n        index = checkTokenAndGetIndex(this, token);\n        while (index !== -1) {\n          this.splice(index, 1);\n          updated = true;\n          index = checkTokenAndGetIndex(this, token);\n        }\n      }\n      while (++i < l);\n\n      if (updated) {\n        this._updateClassName();\n      }\n    };\n    classListProto.toggle = function (token, force) {\n      token += \"\";\n\n      var\n          result = this.contains(token)\n        , method = result ?\n          force !== true && \"remove\"\n        :\n          force !== false && \"add\"\n      ;\n\n      if (method) {\n        this[method](token);\n      }\n\n      if (force === true || force === false) {\n        return force;\n      } else {\n        return !result;\n      }\n    };\n    classListProto.toString = function () {\n      return this.join(\" \");\n    };\n\n    if (objCtr.defineProperty) {\n      var classListPropDesc = {\n          get: classListGetter\n        , enumerable: true\n        , configurable: true\n      };\n      try {\n        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n      } catch (ex) { // IE 8 doesn't support enumerable:true\n        if (ex.number === -0x7FF5EC54) {\n          classListPropDesc.enumerable = false;\n          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n        }\n      }\n    } else if (objCtr[protoProp].__defineGetter__) {\n      elemCtrProto.__defineGetter__(classListProp, classListGetter);\n    }\n\n    }(window.self));\n\n    } else {\n    // There is full or partial native classList support, so just check if we need\n    // to normalize the add/remove and toggle APIs.\n\n    (function () {\n      \"use strict\";\n\n      var testElement = document.createElement(\"_\");\n\n      testElement.classList.add(\"c1\", \"c2\");\n\n      // Polyfill for IE 10/11 and Firefox <26, where classList.add and\n      // classList.remove exist but support only one argument at a time.\n      if (!testElement.classList.contains(\"c2\")) {\n        var createMethod = function(method) {\n          var original = DOMTokenList.prototype[method];\n\n          DOMTokenList.prototype[method] = function(token) {\n            var i, len = arguments.length;\n\n            for (i = 0; i < len; i++) {\n              token = arguments[i];\n              original.call(this, token);\n            }\n          };\n        };\n        createMethod('add');\n        createMethod('remove');\n      }\n\n      testElement.classList.toggle(\"c3\", false);\n\n      // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n      // support the second argument.\n      if (testElement.classList.contains(\"c3\")) {\n        var _toggle = DOMTokenList.prototype.toggle;\n\n        DOMTokenList.prototype.toggle = function(token, force) {\n          if (1 in arguments && !this.contains(token) === !force) {\n            return force;\n          } else {\n            return _toggle.call(this, token);\n          }\n        };\n\n      }\n\n      testElement = null;\n    }());\n  }\n}\n","require('../../modules/es6.array.find');\nmodule.exports = require('../../modules/$.core').Array.find;","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/$.core').Object.assign;","require('../../modules/es7.regexp.escape');\nmodule.exports = require('../../modules/$.core').RegExp.escape;","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};","module.exports = function(){ /* empty */ };","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx      = require('./$.ctx')\n  , IObject  = require('./$.iobject')\n  , toObject = require('./$.to-object')\n  , toLength = require('./$.to-length')\n  , asc      = require('./$.array-species-create');\nmodule.exports = function(TYPE){\n  var IS_MAP        = TYPE == 1\n    , IS_FILTER     = TYPE == 2\n    , IS_SOME       = TYPE == 3\n    , IS_EVERY      = TYPE == 4\n    , IS_FIND_INDEX = TYPE == 6\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;\n  return function($this, callbackfn, that){\n    var O      = toObject($this)\n      , self   = IObject(O)\n      , f      = ctx(callbackfn, that, 3)\n      , length = toLength(self.length)\n      , index  = 0\n      , result = IS_MAP ? asc($this, length) : IS_FILTER ? asc($this, 0) : undefined\n      , val, res;\n    for(;length > index; index++)if(NO_HOLES || index in self){\n      val = self[index];\n      res = f(val, index, O);\n      if(TYPE){\n        if(IS_MAP)result[index] = res;            // map\n        else if(res)switch(TYPE){\n          case 3: return true;                    // some\n          case 5: return val;                     // find\n          case 6: return index;                   // findIndex\n          case 2: result.push(val);               // filter\n        } else if(IS_EVERY)return false;          // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar isObject = require('./$.is-object')\n  , isArray  = require('./$.is-array')\n  , SPECIES  = require('./$.wks')('species');\nmodule.exports = function(original, length){\n  var C;\n  if(isArray(original)){\n    C = original.constructor;\n    // cross-realm fallback\n    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;\n    if(isObject(C)){\n      C = C[SPECIES];\n      if(C === null)C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length);\n};","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};","var core = module.exports = {version: '1.2.6'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef","// optional / simple context binding\nvar aFunction = require('./$.a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};","var global    = require('./$.global')\n  , core      = require('./$.core')\n  , ctx       = require('./$.ctx')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && key in target;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(param){\n        return this instanceof C ? new C(param) : C(param);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\n  }\n};\n// type bitmap\n$export.F = 1;  // forced\n$export.G = 2;  // global\n$export.S = 4;  // static\n$export.P = 8;  // proto\n$export.B = 16; // bind\n$export.W = 32; // wrap\nmodule.exports = $export;","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./$.cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};","// 7.2.2 IsArray(argument)\nvar cof = require('./$.cof');\nmodule.exports = Array.isArray || function(arg){\n  return cof(arg) == 'Array';\n};","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};","var $Object = Object;\nmodule.exports = {\n  create:     $Object.create,\n  getProto:   $Object.getPrototypeOf,\n  isEnum:     {}.propertyIsEnumerable,\n  getDesc:    $Object.getOwnPropertyDescriptor,\n  setDesc:    $Object.defineProperty,\n  setDescs:   $Object.defineProperties,\n  getKeys:    $Object.keys,\n  getNames:   $Object.getOwnPropertyNames,\n  getSymbols: $Object.getOwnPropertySymbols,\n  each:       [].forEach\n};","// 19.1.2.1 Object.assign(target, source, ...)\nvar $        = require('./$')\n  , toObject = require('./$.to-object')\n  , IObject  = require('./$.iobject');\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = require('./$.fails')(function(){\n  var a = Object.assign\n    , A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = toObject(target)\n    , $$    = arguments\n    , $$len = $$.length\n    , index = 1\n    , getKeys    = $.getKeys\n    , getSymbols = $.getSymbols\n    , isEnum     = $.isEnum;\n  while($$len > index){\n    var S      = IObject($$[index++])\n      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  }\n  return T;\n} : Object.assign;","module.exports = function(regExp, replace){\n  var replacer = replace === Object(replace) ? function(part){\n    return replace[part];\n  } : replace;\n  return function(it){\n    return String(it).replace(regExp, replacer);\n  };\n};","var global = require('./$.global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};","// 7.1.15 ToLength\nvar toInteger = require('./$.to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};","// 7.1.13 ToObject(argument)\nvar defined = require('./$.defined');\nmodule.exports = function(it){\n  return Object(defined(it));\n};","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};","var store  = require('./$.shared')('wks')\n  , uid    = require('./$.uid')\n  , Symbol = require('./$.global').Symbol;\nmodule.exports = function(name){\n  return store[name] || (store[name] =\n    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));\n};","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./$.export')\n  , $find   = require('./$.array-methods')(5)\n  , KEY     = 'find'\n  , forced  = true;\n// Shouldn't skip holes\nif(KEY in [])Array(1)[KEY](function(){ forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn/*, that = undefined */){\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./$.add-to-unscopables')(KEY);","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./$.export');\n\n$export($export.S + $export.F, 'Object', {assign: require('./$.object-assign')});","// https://github.com/benjamingr/RexExp.escape\nvar $export = require('./$.export')\n  , $re     = require('./$.replacer')(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});\n","module.exports = Date.now || now\n\nfunction now() {\n    return new Date().getTime()\n}\n","\n/**\n * Module dependencies.\n */\n\nvar now = require('date-now');\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\n\nmodule.exports = function debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = now() - timestamp;\n\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function debounced() {\n    context = this;\n    args = arguments;\n    timestamp = now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n};\n","(function (ELEMENT) {\n\tELEMENT.matches = ELEMENT.matches || ELEMENT.mozMatchesSelector || ELEMENT.msMatchesSelector || ELEMENT.oMatchesSelector || ELEMENT.webkitMatchesSelector;\n\n\tELEMENT.closest = ELEMENT.closest || function closest(selector) {\n\t\tvar element = this;\n\n\t\twhile (element) {\n\t\t\tif (element.matches(selector)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\telement = element.parentElement;\n\t\t}\n\n\t\treturn element;\n\t};\n}(Element.prototype));\n","var Parser = require('./lib/parser')\n  , Resource = require('./lib/resource')\n  , validationFlag = false;\n\nmodule.exports = {\n\n  parse: function(unparsed) {\n    return new Parser().parse(unparsed, validationFlag);\n  },\n\n  enableValidation: function(flag) {\n    validationFlag = (flag != null) ? flag : true;\n  },\n\n  disableValidation: function() {\n    validationFlag = false;\n  },\n\n  Resource: Resource\n\n};\n","'use strict';\n\n/*\n * A very naive copy-on-write immutable stack. Since the size of the stack\n * is equal to the depth of the embedded resources for one HAL resource, the bad\n * performance for the copy-on-write approach is probably not a problem at all.\n * Might be replaced by a smarter solution later. Or not. Whatever.\n */\nfunction ImmutableStack() {\n  if (arguments.length >= 1) {\n    this._array = arguments[0];\n  } else {\n    this._array = [];\n  }\n}\n\nImmutableStack.prototype.array = function() {\n  return this._array;\n};\n\nImmutableStack.prototype.isEmpty = function(array) {\n  return this._array.length === 0;\n};\n\nImmutableStack.prototype.push = function(element) {\n  var array = this._array.slice(0);\n  array.push(element);\n  return new ImmutableStack(array);\n};\n\nImmutableStack.prototype.pop = function() {\n  var array = this._array.slice(0, this._array.length - 1);\n  return new ImmutableStack(array);\n};\n\nImmutableStack.prototype.peek = function() {\n  if (this.isEmpty()) {\n    throw new Error('can\\'t peek on empty stack');\n  }\n  return this._array[this._array.length - 1];\n};\n\nmodule.exports = ImmutableStack;\n","'use strict';\n\nvar Resource = require('./resource')\n  , Stack = require('./immutable_stack');\n\nvar linkSpec = {\n  href: { required: true, defaultValue: null },\n  templated: { required: false, defaultValue: false },\n  type: { required: false, defaultValue: null },\n  deprecation: { required: false, defaultValue: null },\n  name: { required: false, defaultValue: null },\n  profile: { required: false, defaultValue: null },\n  title: { required: false, defaultValue: null },\n  hreflang: { required: false, defaultValue: null }\n};\n\nfunction Parser() {\n}\n\nParser.prototype.parse = function parse(unparsed, validationFlag) {\n  var validation = validationFlag ? [] : null;\n  return _parse(unparsed, validation, new Stack());\n};\n\nfunction _parse(unparsed, validation, path) {\n  if (unparsed == null) {\n    return unparsed;\n  }\n  var allLinkArrays = parseLinks(unparsed._links, validation,\n      path.push('_links'));\n  var curies = parseCuries(allLinkArrays);\n  var allEmbeddedArrays = parseEmbeddedResourcess(unparsed._embedded,\n      validation, path.push('_embedded'));\n  var resource = new Resource(allLinkArrays, curies, allEmbeddedArrays,\n      validation);\n  copyNonHalProperties(unparsed, resource);\n  resource._original = unparsed;\n  return resource;\n}\n\nfunction parseLinks(links, validation, path) {\n  links = parseHalProperty(links, parseLink, validation, path);\n  if (links == null || links.self == null) {\n    // No links at all? Then it implictly misses the self link which it SHOULD\n    // have according to spec\n    reportValidationIssue('Resource does not have a self link', validation,\n        path);\n  }\n  return links;\n}\n\nfunction parseCuries(linkArrays) {\n  if (linkArrays) {\n    return linkArrays.curies;\n  } else {\n    return [];\n  }\n}\n\nfunction parseEmbeddedResourcess(original, parentValidation, path) {\n  var embedded = parseHalProperty(original, identity, parentValidation, path);\n  if (embedded == null) {\n    return embedded;\n  }\n  Object.keys(embedded).forEach(function(key) {\n    embedded[key] = embedded[key].map(function(embeddedElement) {\n      var childValidation = parentValidation != null ? [] : null;\n      var embeddedResource = _parse(embeddedElement, childValidation,\n          path.push(key));\n      embeddedResource._original = embeddedElement;\n      return embeddedResource;\n    });\n  });\n  return embedded;\n}\n\n/*\n * Copy over non-hal properties (everything that is not _links or _embedded)\n * to the parsed resource.\n */\nfunction copyNonHalProperties(unparsed, resource) {\n  Object.keys(unparsed).forEach(function(key) {\n    if (key !== '_links' && key !== '_embedded') {\n      resource[key] = unparsed[key];\n    }\n  });\n}\n\n/*\n * Processes one of the two main hal properties, that is _links or _embedded.\n * Each sub-property is turned into a single element array if it isn't already\n * an array. processingFunction is applied to each array element.\n */\nfunction parseHalProperty(property, processingFunction, validation, path) {\n  if (property == null) {\n    return property;\n  }\n\n  // create a shallow copy of the _links/_embedded object\n  var copy = {};\n\n  // normalize each link/each embedded object and put it into our copy\n  Object.keys(property).forEach(function(key) {\n    copy[key] = arrayfy(key, property[key], processingFunction,\n        validation, path);\n  });\n  return copy;\n}\n\nfunction arrayfy(key, object, fn, validation, path) {\n  if (isArray(object)) {\n    return object.map(function(element) {\n      return fn(key, element, validation, path);\n    });\n  } else {\n    return [fn(key, object, validation, path)];\n  }\n}\n\n\nfunction parseLink(linkKey, link, validation, path) {\n  if (!isObject(link)) {\n    throw new Error('Link object is not an actual object: ' + link +\n      ' [' + typeof link + ']');\n  }\n\n  // create a shallow copy of the link object\n  var copy = shallowCopy(link);\n\n  // add missing properties mandated by spec and do generic validation\n  Object.keys(linkSpec).forEach(function(key) {\n    if (copy[key] == null) {\n      if (linkSpec[key].required) {\n        reportValidationIssue('Link misses required property ' + key + '.',\n            validation, path.push(linkKey));\n      }\n      if (linkSpec[key].defaultValue != null) {\n        copy[key] = linkSpec[key].defaultValue;\n      }\n    }\n  });\n\n  // check more inter-property relations mandated by spec\n  if (copy.deprecation) {\n    log('Warning: Link ' + pathToString(path.push(linkKey)) +\n        ' is deprecated, see ' + copy.deprecation);\n  }\n  if (copy.templated !== true && copy.templated !== false) {\n    copy.templated = false;\n  }\n\n  if (!validation) {\n    return copy;\n  }\n  if (copy.href && copy.href.indexOf('{') >= 0 && !copy.templated) {\n    reportValidationIssue('Link seems to be an URI template ' +\n        'but its \"templated\" property is not set to true.', validation,\n        path.push(linkKey));\n  }\n  return copy;\n}\n\nfunction isArray(o) {\n  return Object.prototype.toString.call(o) === '[object Array]';\n}\n\nfunction isObject(o) {\n  return typeof o === 'object';\n}\n\nfunction identity(key, object) {\n  return object;\n}\n\nfunction reportValidationIssue(message, validation, path) {\n  if (validation) {\n    validation.push({\n      path: pathToString(path),\n      message: message\n    });\n  }\n}\n\n// TODO fix this ad hoc mess - does ie support console.log as of ie9?\nfunction log(message) {\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    console.log(message);\n  }\n}\n\nfunction shallowCopy(source) {\n  var copy = {};\n  Object.keys(source).forEach(function(key) {\n    copy[key] = source[key];\n  });\n  return copy;\n}\n\nfunction pathToString(path) {\n  var s = '$.';\n  for (var i = 0; i < path.array().length; i++) {\n    s += path.array()[i] + '.';\n  }\n  s = s.substring(0, s.length - 1);\n  return s;\n}\n\nmodule.exports = Parser;\n","'use strict';\n\nfunction Resource(links, curies, embedded, validationIssues) {\n  var self = this;\n  this._links = links || {};\n  this._initCuries(curies);\n  this._embedded = embedded || {};\n  this._validation = validationIssues || [];\n}\n\nResource.prototype._initCuries = function(curies) {\n  this._curiesMap = {};\n  if (!curies) {\n    this._curies = [];\n  } else {\n    this._curies = curies;\n    for (var i = 0; i < this._curies.length; i++) {\n      var curie = this._curies[i];\n      this._curiesMap[curie.name] = curie;\n    }\n  }\n  this._preResolveCuries();\n};\n\nResource.prototype._preResolveCuries = function() {\n  this._resolvedCuriesMap = {};\n  for (var i = 0; i < this._curies.length; i++) {\n    var curie = this._curies[i];\n    if (!curie.name) {\n      continue;\n    }\n    for (var rel in this._links) {\n      if (rel !== 'curies') {\n        this._preResolveCurie(curie, rel);\n      }\n    }\n  }\n};\n\nResource.prototype._preResolveCurie = function(curie, rel) {\n  var link = this._links[rel];\n  var prefixAndReference = rel.split(/:(.+)/);\n  var candidate = prefixAndReference[0];\n  if (curie.name === candidate) {\n    if (curie.templated && prefixAndReference.length >= 1) {\n      // TODO resolving templated CURIES should use a small uri template\n      // lib, not coded here ad hoc\n      var href = curie.href.replace(/(.*){(.*)}(.*)/, '$1' +\n          prefixAndReference[1] + '$3');\n      this._resolvedCuriesMap[href] = rel;\n    } else {\n      this._resolvedCuriesMap[curie.href] = rel;\n    }\n  }\n};\n\nResource.prototype.allLinkArrays = function() {\n  return this._links;\n};\n\nResource.prototype.linkArray = function(key) {\n  return propertyArray(this._links, key);\n};\n\nResource.prototype.link = function(key, index) {\n  return elementOfPropertyArray(this._links, key, index);\n};\n\nResource.prototype.hasCuries = function(key) {\n  return this._curies.length > 0;\n};\n\nResource.prototype.curieArray = function(key) {\n  return this._curies;\n};\n\nResource.prototype.curie = function(name) {\n  return this._curiesMap[name];\n};\n\nResource.prototype.reverseResolveCurie = function(fullUrl) {\n  return this._resolvedCuriesMap[fullUrl];\n};\n\nResource.prototype.allEmbeddedResourceArrays = function () {\n  return this._embedded;\n};\n\nResource.prototype.embeddedResourceArray = function(key) {\n  return propertyArray(this._embedded, key);\n};\n\nResource.prototype.embeddedResource = function(key, index) {\n  return elementOfPropertyArray(this._embedded, key, index);\n};\n\nResource.prototype.original = function() {\n  return this._original;\n};\n\nfunction propertyArray(object, key) {\n  return object != null ? object[key] : null;\n}\n\nfunction elementOfPropertyArray(object, key, index) {\n  index = index || 0;\n  var array = propertyArray(object, key);\n  if (array != null && array.length >= 1) {\n    return array[index];\n  }\n  return null;\n}\n\nResource.prototype.validationIssues = function() {\n  return this._validation;\n};\n\n// alias definitions\nResource.prototype.allLinks = Resource.prototype.allLinkArrays;\nResource.prototype.allEmbeddedArrays =\n    Resource.prototype.allEmbeddedResources =\n    Resource.prototype.allEmbeddedResourceArrays;\nResource.prototype.embeddedArray = Resource.prototype.embeddedResourceArray;\nResource.prototype.embedded = Resource.prototype.embeddedResource;\nResource.prototype.validation = Resource.prototype.validationIssues;\n\nmodule.exports = Resource;\n","module.exports=function(n){var t={},e=[];n=n||this,n.on=function(n,e,l){(t[n]=t[n]||[]).push([e,l])},n.off=function(n,l){n||(t={});for(var o=t[n]||e,i=o.length=l?o.length:0;i--;)l==o[i][0]&&o.splice(i,1)},n.emit=function(n){for(var l,o=t[n]||e,i=o.length>0?o.slice(0,o.length):o,c=0;l=i[c++];)l[0].apply(l[1],e.slice.call(arguments,1))}};"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}